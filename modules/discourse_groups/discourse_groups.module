<?php

/**
 * @file
 * Contains discourse groups module.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function discourse_groups_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];

  // Add a 'discourse_groups_field' base field to all node types.
  if ($entity_type->id() === 'group') {
    $fields['discourse_groups_field'] = BaseFieldDefinition::create('discourse_groups_field')
      ->setLabel(t('Discourse Groups'))
      ->setDescription(t('Discourse Groups settings.'))
      ->setRevisionable(TRUE)
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'discourse_groups_widget',
        'region' => 'hidden',
        'weight' => 100,
      ])
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_form_BASE_ID_alter().
 */
function discourse_groups_form_group_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // @todo Add validation to prevent duplicated group names?
  // If discourse groups is enabled.
  if (isset($form['discourse_groups_field'])) {
    $group = $form_state->getFormObject()->getEntity();
    // Checking edit form.
    if ($form_state->getFormObject()->getOperation() == 'edit') {
      if ($group->get('discourse_groups_field')->push_to_discourse != 1) {
        // If push_to_discourse is not enabled.
        $form['discourse_groups_field']['widget'][0]['push_to_discourse']['#default_value'] = 0;
      }
    }
    $form['actions']['submit']['#submit'][] = '_post_group_to_discourse';

    // Set title field help text.
    $config_factory = \Drupal::service('config.factory');
    $discourse_groups_settings = $config_factory->get('discourse_groups.discourse_groups_settings');
    $group_types_enabled_for_discourse = $discourse_groups_settings->get('group_types_enabled_for_discourse');
    $group_type = $group->bundle();
    if (isset($group_types_enabled_for_discourse[$group_type]) && $group_types_enabled_for_discourse[$group_type]) {
      $form['label']['widget'][0]['value']['#description'] = FieldFilteredMarkup::create(t('Please note: Group names must be unique in Discourse.'));
    }
  }
}

/**
 * Post group to discourse.
 */
function _post_group_to_discourse($form, FormStateInterface &$form_state) {
  $form_values = $form_state->getValues();
  $group = $form_state->getFormObject()->getEntity();
  $discourse_category_id = $group->get('discourse_groups_field')->category_id;
  $discourse_group_id = $group->get('discourse_groups_field')->group_id;
  $post_condition = $discourse_category_id == NULL && $discourse_category_id !== '' && $form_values['discourse_groups_field'][0]['push_to_discourse'] == 1;
  // New group.
  if ($post_condition) {
    $discourse_api_client = \Drupal::service('discourse.discourse_api_client');

    // Create the discourse group.
    $group_response = $discourse_api_client->createGroup([
      'group' => [
        'name' => _discourse_groups_format_group_name($group->label()),
      ],
    ]);

    $created_group = Json::decode($group_response);

    // Create the discourse category with just that group.
    $group_perms = [];
    $group_perms[$created_group["basic_group"]["name"]] = 1;

    $category_response = $discourse_api_client->createCategory([
      'name' => $group->label(),
      'permissions' => $group_perms,
    ]);

    $created_category = Json::decode($category_response);

    // Get topic details and save it in discourse field of the node.
    $discourse_form_values = $form_values['discourse_groups_field'];
    $discourse_form_values[0]['category_id'] = $created_category['category']['id'];
    $discourse_form_values[0]['group_name'] = $created_group["basic_group"]['name'];
    $discourse_form_values[0]['group_id'] = $created_group["basic_group"]['id'];

    // Change the discourse_groups_field according to returned values.
    $group->set('discourse_groups_field', $discourse_form_values);
    $group->save();
  }
  // Group is being updated.
  else {
    if ($form_state->getValue('label') != $form["label"]["widget"][0]["value"]["#default_value"]) {
      $new_label = $form_state->getValue('label');
      $discourse_api_client = \Drupal::service('discourse.discourse_api_client');
      // Update the category label.
      $discourse_api_client->updateCategory($discourse_category_id, ['name' => $new_label[0]['value']]);
      // Update the group name.
      $new_group_name = _discourse_groups_format_group_name($new_label[0]['value']);
      $updated_group_response = $discourse_api_client->updateGroup($discourse_group_id, [
        'group' => [
          'name' => $new_group_name,
        ],
      ]);
      $updated_group = Json::decode($updated_group_response);
      if (isset($updated_group['success'])) {
        $discourse_form_values = $form_values['discourse_groups_field'];
        $discourse_form_values[0]['group_name'] = $new_group_name;
        $group->set('discourse_groups_field', $discourse_form_values);
        $group->save();
      }
    }
  }
}

/**
 * Implements hook_help().
 */
function discourse_groups_help($route_name, RouteMatchInterface $route_match) {
  $output = '';
  switch ($route_name) {
    // Main module help for the discourse module.
    case 'help.page.discourse':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Discourse API and Groups integration.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implements hook_entity_delete().
 */
function discourse_groups_entity_delete(EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'group') {
    if ($entity->hasField('discourse_groups_field')) {
      $discourse_api_client = \Drupal::service('discourse.discourse_api_client');
      // Delete the group.
      $group_id = $entity->get('discourse_groups_field')->group_id;
      if ($group_id) {
        $deleted_group_respnse = $discourse_api_client->deleteGroup($group_id);
        $deleted_group = Json::decode($deleted_group_respnse);
        if (isset($deleted_group['success'])) {
          \Drupal::messenger()->addStatus(t('Successfully deleted Discourse group: @group', ['@group' => $group_id]));
        }
        else {
          $message = t('Unable to delete Discourse group: @group', ['@group' => $group_id]);
          \Drupal::logger('discourse_groups')->error($message);
          \Drupal::messenger()->addError($message);
        }
      }

      // Delete the category.
      $category_id = $entity->get('discourse_groups_field')->category_id;
      if ($category_id) {
        $deleted_category_response = $discourse_api_client->deleteCategory($category_id);
        $deleted_category = Json::decode($deleted_category_response);
        if (isset($deleted_category['success'])) {
          \Drupal::messenger()->addStatus(t('Successfully deleted Discourse category: @category', ['@category' => $category_id]));
        }
        else {
          $message = t('Unable to delete Discourse category: @category', ['@category' => $category_id]);
          \Drupal::logger('discourse_groups')->error($message);
          \Drupal::messenger()->addError($message);
        }
      }
    }
  }
}

/**
 * Format name to meet discourse naming requirements.
 *
 * @param string $name
 *   Name to format.
 *
 * @return string
 *   Formatted name.
 */
function _discourse_groups_format_group_name(string $name) {
  return preg_replace('/\s+/', '_', $name);
}
